trigger:
- main

pool:
  name: Default  # âœ… Usa tu agente local llamado 'Default'

variables:
  ACR_NAME: 'mrluxus'         # Nombre de tu Azure Container Registry (sin .azurecr.io)
  IMAGE_NAME: 'front-erp'     # Nombre de tu imagen Docker
  RESOURCE_GROUP: 'erp-final' # Grupo de recursos en Azure
  WEBAPP_NAME: 'frontErp'     # Nombre de tu Azure Web App

stages:
# -------- STAGE BUILD --------
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildJob
    displayName: 'Build Docker Image'
    steps:
    - checkout: self

    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: 'acr-erp'  # ðŸ”¥ Connection tipo Docker Registry hacia tu ACR

    - script: |
        docker build -t $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest .
        docker push $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest
      displayName: 'Build and Push Image'

# -------- STAGE DEPLOY --------
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: Build
  jobs:
  - job: DeployJob
    displayName: 'Deploy Frontend'
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Deploy Docker Image to App Service'
      inputs:
        azureSubscription: 'ConexionAzure'   # ðŸ”¥ Nombre de tu service connection a Azure
        appName: $(WEBAPP_NAME)
        resourceGroupName: $(RESOURCE_GROUP)
        containers: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest'

        azureSubscription: 'back erp'    # <- Esta es la conexiÃ³n de tipo Azure Resource Manager
        appName: $(WEBAPP_NAME)
        containers: $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest
